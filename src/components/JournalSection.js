import React, { useState } from 'react';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';
import { jsPDF } from 'jspdf';

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

function JournalSection({ entries, onJournalSubmit, onClose, darkMode }) {
  const [entry, setEntry] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (entry.trim()) {
      onJournalSubmit(entry);
      setEntry('');
    }
  };

  const exportToPDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    const pageHeight = doc.internal.pageSize.getHeight();
    const margin = 10;
    const contentWidth = pageWidth - 2 * margin;
    let y = margin + 25; // Increased space for heading

    // Add heading
    doc.setFontSize(20);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(0, 102, 204); // Blue color for heading
    doc.text('Virtual AI Therapist', pageWidth / 2, margin + 15, { align: 'center' });

    // Add page borders
    doc.setLineWidth(1); // Thicker border
    doc.setDrawColor(0, 102, 204); // Blue border
    doc.rect(margin, margin, contentWidth, pageHeight - 2 * margin, 'S'); // Full page border

    // Add content with individual borders
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(0); // Black for content
    entries.forEach((entry, index) => {
      const text = `${new Date(entry.date).toLocaleString()}: ${entry.text}`;
      const lines = doc.splitTextToSize(text, contentWidth - 10);
      const textHeight = lines.length * 6; // Slightly taller lines

      if (y + textHeight + 15 > pageHeight - margin - 25) { // Leave space for stamp
        doc.addPage();
        y = margin + 25;
        doc.setLineWidth(1);
        doc.setDrawColor(0, 102, 204);
        doc.rect(margin, margin, contentWidth, pageHeight - 2 * margin, 'S'); // Border on new page
      }

      // Border around each entry
      doc.setLineWidth(0.5);
      doc.setDrawColor(100); // Gray for entry borders
      doc.rect(margin + 5, y - 5, contentWidth - 10, textHeight + 10, 'S');
      doc.text(lines, margin + 10, y);
      y += textHeight + 15;
    });

    // Add stamp-like footer on every page
    const totalPages = doc.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setFont('helvetica', 'italic');
      doc.setTextColor(100); // Darker gray for stamp
      doc.setDrawColor(100);
      doc.setLineWidth(0.5);
      const stampText = 'Generated by Virtual AI Therapist';
      const stampWidth = doc.getTextWidth(stampText) + 10;
      doc.rect(pageWidth / 2 - stampWidth / 2, pageHeight - margin - 15, stampWidth, 10, 'S');
      doc.text(stampText, pageWidth / 2, pageHeight - margin - 5, { align: 'center' });
    }

    doc.save('journal.pdf');
  };

  const moodData = {
    labels: entries.map((e) => new Date(e.date).toLocaleDateString()),
    datasets: [
      {
        label: 'Mood Trend',
        data: entries.map((e) => {
          if (e.text.toLowerCase().includes('good') || e.text.toLowerCase().includes('happy')) return 3;
          if (e.text.toLowerCase().includes('bad') || e.text.toLowerCase().includes('sad')) return 1;
          return 2;
        }),
        borderColor: darkMode ? '#60A5FA' : '#3B82F6',
        backgroundColor: darkMode ? 'rgba(96, 165, 250, 0.2)' : 'rgba(59, 130, 246, 0.2)',
        tension: 0.4,
      },
    ],
  };

  const options = {
    scales: { y: { min: 0, max: 3, ticks: { stepSize: 1 }, title: { display: true, text: 'Mood (1-3)' } } },
    plugins: { 
      legend: { display: false }, 
      title: { display: true, text: 'Mood Trend' },
      tooltip: { callbacks: { label: (context) => `Mood: ${context.raw === 3 ? 'Good' : context.raw === 2 ? 'Neutral' : 'Low'}` } }
    },
  };

  return (
    <div className={`p-6 rounded-xl shadow-lg border ${darkMode ? 'bg-gray-800 border-gray-700 text-white' : 'bg-white border-blue-200 text-black'}`}>
      <div className="flex justify-between items-center mb-4">
        <h2 className={`text-xl font-semibold ${darkMode ? 'text-blue-300' : 'text-blue-600'}`}>Your Journal</h2>
        <button className="text-gray-500 dark:text-gray-300 hover:text-gray-700 dark:hover:text-gray-100" onClick={onClose}>
          âœ•
        </button>
      </div>
      <form onSubmit={handleSubmit} className="mb-6">
        <textarea
          value={entry}
          onChange={(e) => setEntry(e.target.value)}
          placeholder="Reflect on your day..."
          className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 shadow-sm ${
            darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'bg-white border-blue-200'
          }`}
          rows="4"
        />
        <button
          type="submit"
          className="mt-2 bg-green-400 dark:bg-green-600 text-white px-6 py-2 rounded-full hover:bg-green-500 dark:hover:bg-green-700 transition duration-300"
        >
          Save
        </button>
      </form>
      {entries.length > 0 && (
        <>
          <div className="mb-6">
            <h3 className={`text-lg font-medium ${darkMode ? 'text-gray-200' : 'text-gray-700'}`}>Mood Trend</h3>
            <Line data={moodData} options={options} />
            <p className="mt-2 text-sm">
              <strong>Graph Explanation:</strong> Mood trend over time. 
              - <span className="text-blue-500">Blue Line</span>: 3 (Good), 2 (Neutral), 1 (Low).
            </p>
          </div>
          <button
            onClick={exportToPDF}
            className="mb-4 bg-purple-400 dark:bg-purple-600 text-white px-6 py-2 rounded-full hover:bg-purple-500 dark:hover:bg-purple-700 transition duration-300"
          >
            Export to PDF
          </button>
        </>
      )}
      <div className="max-h-64 overflow-y-auto">
        {entries.map((entry, index) => (
          <div key={index} className={`mb-4 p-3 rounded-lg shadow-sm ${darkMode ? 'bg-gray-700' : 'bg-blue-50'}`}>
            <p className="text-sm text-gray-500 dark:text-gray-400">{new Date(entry.date).toLocaleString()}</p>
            <p className={darkMode ? 'text-white' : 'text-blue-800'}>{entry.text}</p>
          </div>
        ))}
      </div>
    </div>
  );
}

export default JournalSection;